import random

#step 1. Assigning suits, ranks and their values..

#These are global variables defined out of the class
suits = ('Hearts', 'Diamonds', 'Spades', 'Clubs')     # set the suits in form of tuples.
ranks = ('two','three','four','five','six','seven','eight','nine','ten','jack','king','queen','ace')
values = {'two' : 2 ,'three' : 3,'four' : 4,'five' : 5,'six' : 6,'seven' : 7,'eight' : 8,'nine' : 9,'ten' : 10,'jack' : 10,'king' : 10,'queen' : 10,'ace' : 11}

playing = True

# step 2. Create a Card class..

class card():
    def __init__(self, suit, rank):
        self.suit = suit
        self.rank = rank
    def __str__(self):
        return self.rank + " of " + self.suit      #return string like "two of hearts"...

# step  3. Create a Deck class


class deck():
    # 1. create a deck of 52 cards..
    def __init__(self):
        self.deck = []
        for suit in suits:
            for rank in ranks:
                self.deck.append(card(suit,rank))    #calling card class which takes suit,rank as attributes

    # 2. Defining each card of deck
    def __str__(self):                               #this method consists all 52 cards
        deck_comp = ''
        for card in self.deck:
            deck_comp+= '\n' + card.__str__()         #card class also have string method
        return "The Deck has : "+deck_comp

    # 3. Shuffle the deck
    def shuffle(self):
       random.shuffle(self.deck)

    # 4. dealing the card
    def deal(self):
        single_card = self.deck.pop()                #picking the card from deck and return
        return single_card

# step 4. Create a Hand class.  (this class represents the what card is in the hands of someone)
class hand():
    def __init__(self):
        self.cards = []      #start with an empty list as in the deck class
        self.value = 0       #start with zero value
        self.aces = 0        #add an attribute to keep track of aces

    def add_card(self,card):
        #card passed in from deck.deal()--> single card(suit,rank)
        self.cards.append(card)
        self.value+=values[card.rank]

        #track aces
        if card.rank == 'ace':
            self.aces += 1


    def adjust_for_ace(self):

        #if total is > 21 and i still have an ace
        #then change my ace to be 1 instead of 11
        while self.value > 21 and self.aces > 0:
            self.value-=10
            self.aces-=1

# step 5. Create a chips class.

class chips():
    def __init__(self, total = 100):
        self.total = total           #this can be set to a default value or supplied by a user input
        self.bet = 0
    def win_bet(self):
        self.total += self.bet
    def lose_bet(self):
        self.total -= self.bet

# step 6. defining some funtions.

# 1. function for taking bet..

def take_bet(chips):
    while True:
        try:
            chips.bet = int(input("How much chips would you like to bet?  "))
        except:
            print("Sorry please provide an integer ")
        else:
            if chips.bet > chips.total:
                print('Sorry not enough chips !! you have {}'.format(chips.total))
            else:
                break
# 2. function for taking bets..
def hit(deck,hand):
    single_card = deck.deal()             #taking another card from deck
    hand.add_card(single_card)            #above is added to the hand
    hand.adjust_for_ace()                 #check for the ace

# 3. function for player to hit or stand..
def hit_or_stand(deck,hand):
    global playing                          # to control an upcoming while loop
    while True:

        x = input("Hit or Stand? Enter h or s =  ")

        if x[0].lower() == 'h':                #incase player types 'hh' or 'Hit' so it is considered to be 0 index

            hit(deck,hand)

        elif x[0].lower() == 's':
            print("Player stands dealer's turn")
            playing = False

        else:
            print("Sorry , I did not understand that, please enter h or s only")
            continue
        break
# 4. Functions to display cards.
def show_some(player,dealer):
    print('****Dealer hand****')
    print('one card hidden')
    print(dealer.cards[1])
    print("\n")
    print("*****Player's Hand****")
    for card in player.cards:
        print(card)

def show_all(player,dealer):
    print("****Dealer's Hand****:")
    for card in dealer.cards:
        print(card)
    print("\n")
    print("****Player's Hand****:")
    for card in player.cards:
        print(card)

# 5. functions to handle end of game scenarios..

def player_busts(player,dealer,chips):
    print("Player bust, Dealer Wins!!")
    chips.lose_bet()

def player_wins(player,dealer,chips):
    print("Player Wins !!")
    chips.win_bet()

def dealer_busts(player,dealer,chips):
    print("Player Wins, Dealer busted !!")
    chips.win_bet()

def dealer_wins(player,dealer,chips):
    print("Dealer Wins")
    chips.lose_bet()
def push(player,dealer):
    print("Dealer and player tie!! PUSH")      #player or dealer both got equal total

# Now on the Game.....

while True:
    # opening statement for the  game...
    print("\t\t\t*****\Welcome to the Blackjack Game/*****")

    # shuffle the deck , deal two cards to each player
    deck1 = deck()
    deck1.shuffle()

    player_hand = hand()
    player_hand.add_card(deck1.deal())
    player_hand.add_card(deck1.deal())

    dealer_hand = hand()
    dealer_hand.add_card(deck1.deal())
    dealer_hand.add_card(deck1.deal())

    # set up the player's chips
    player_chips = chips()

    # prompt the player for their bet
    take_bet(player_chips)

    # show cards (but keep one dealer card hidden )
    show_some(player_hand,dealer_hand)


    while playing:                              # Recall this variable from our hit or stand function


        # Prompt the player to hit or stand
        hit_or_stand(deck1,player_hand)

        # Show cards (but keep one dealer card hidden )
        show_some(player_hand,dealer_hand)

        # if player's hand exceeds 21, run player_busts() and break out of loop
        if player_hand.value > 21 :
            player_busts(player_hand,dealer_hand,player_chips)
            break

#if player hasn't busted , play dealer's hand until dealer reaches 17.
    if player_hand.value <= 21 :
        while dealer_hand.value < player_hand.value:
            hit(deck1,dealer_hand)
        # show all cards.
        show_all(player_hand,dealer_hand)

        # Run different winning scenarios.
        if dealer_hand.value > 21:
            dealer_busts(player_hand,dealer_hand,player_chips)
        elif dealer_hand.value > player_hand.value:
            dealer_wins(player_hand,dealer_hand,player_chips)
        elif dealer_hand.value < player_hand.value:
            player_wins(player_hand,dealer_hand,player_chips)
        else:
            push(player_hand,dealer_hand)

    # inform player of their chips total.
    print("\n Player total chips are at : {} ".format(player_chips.total))
    # Ask to play again ..
    new_game = input("Would like to play another hand?? y or n")
    if new_game[0].lower() == 'y':
        playing = True
        continue
    else:
        print("Thank you for playing")
        break
